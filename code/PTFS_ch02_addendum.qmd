```{r}
#| message: false
library(tidyverse)
library(readxl)
library(lubridate)
```


## Visualizing Time Series the tidyverse

```{r}
Amtrak_data <- read_excel(here::here("data", "Amtrak data.xls"), 
    col_types = c("date", "numeric"))
```
```{r}
#| include: false
# this section in case the pre-requisite PTFS_ch02.qmd has not been run
if (! exists('ridership.ts')) ridership.ts <- ts(Amtrak_data$Ridership, start = c(1991,1), end = c(2004, 3), freq = 12)
if (! exists('ridership.lm')) {
  library(forecast)
  ridership.lm <- tslm(ridership.ts ~ trend + I(trend^2))
}
```
```{r}
Amtrak_data %>% 
  mutate(fitted = ridership.lm$fitted) %>% 
  ggplot(aes(Month, Ridership)) +
  geom_line(alpha = 0.5) +
  geom_line(aes(y = fitted))
```





```{r}
Amtrak_data %>% 
  mutate(fitted = ridership.lm$fitted) %>% 
  filter(year(Month) >= 1997,
         year(Month) <= 2000) %>% 
  ggplot(aes(Month, Ridership)) +
  geom_line(alpha = 0.5) +
  geom_line(aes(y = fitted))
```

Interactive Visualization with Plotly

### Baregg Tunnel Traffic

```{r}
#| message: false
library(plotly)

TunnelTraffic <- read_excel(here::here("data", "TunnelTraffic.xls"),
                            col_types = c("date", "numeric"))
tt_raw_plt <- TunnelTraffic %>% 
  ggplot(aes(Day, `# Vehicles in tunnel`)) +
  geom_line(color = 'dark blue') +
  theme_light()

ggplotly(tt_raw_plt)
```

```{r}
#| warning: false
#| message: false
tt_yearly_avg <- TunnelTraffic %>% 
  mutate(year = year(Day),
         month = month(Day)) %>% 
  group_by(year, month) %>% 
  summarise(`Vehicle Traffic` = mean(`# Vehicles in tunnel`),
            .groups = 'drop') %>% 
  mutate(Month = factor(month, labels = month.name ))

tt_year_plt <- tt_yearly_avg %>% 
  ggplot(aes(Month, `Vehicle Traffic`, group = 1)) +
  geom_line() +
  geom_smooth(span = 12) +
  ylim(0, NA) +
  facet_wrap(~ year, scales = "free_x") +
  theme(axis.text.x = element_text(angle = 45))

ggplotly(tt_year_plt)
```

```{r}
tt_wday_plt <- TunnelTraffic %>% 
  mutate(`Day of Week` = weekdays(Day)) %>% 
  ggplot(aes(Day, `# Vehicles in tunnel`, color = `Day of Week`)) +
  geom_line() +
  ylim(0,NA) +
  theme_light()

ggplotly(tt_wday_plt)
```

Plotly enables interactive filtering. Double click on `Day of Week` element in the legend to isolate a single day, subsequent clicks add additional days back to the displayed data.
For example, by removing everything except Thursday and Saturday, you can reproduce the image below using the interactive plotly image above.

![Example Plotly Image filtered by Day of Week](image/TunnelTrafic_plotly_example.png)
