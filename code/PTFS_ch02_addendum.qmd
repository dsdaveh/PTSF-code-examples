```{r}
#| message: false
#| echo: false
library(tidyverse)
library(readxl)
library(fpp3)
```

## Interactive Visualization with Plotly

Athought the textbook suggest proprietry programs for interactive data visualizations, there are multiple open source frameworks for this as well. A popular R library is plotly, which can be used to interactively interrogate plots as demonstrated below.

### Baregg Tunnel Traffic

```{r}
#| message: false
library(plotly)

TunnelTraffic <- read_excel(here::here("data", "TunnelTraffic.xls"),
                            col_types = c("date", "numeric"))
tt_raw_plt <- TunnelTraffic %>% 
  ggplot(aes(Day, `# Vehicles in tunnel`)) +
  geom_line(color = 'dark blue') +
  theme_light()

ggplotly(tt_raw_plt)
```

```{r}
monthly_traffic <- TunnelTraffic %>% 
  mutate(Month = yearmonth(Day)) %>% 
  group_by(Month) %>% 
  summarise(vehicles = mean(`# Vehicles in tunnel`)) %>% 
  as_tsibble(index = Month) 

traffic_plt <- monthly_traffic %>% 
  gg_season(vehicles)

ggplotly(traffic_plt)
```

\
\

```{r}
tt_wday_plt <- TunnelTraffic %>% 
  mutate(`Day of Week` = weekdays(Day)) %>% 
  ggplot(aes(Day, `# Vehicles in tunnel`, color = `Day of Week`)) +
  geom_line() +
  ylim(0,NA) +
  theme_light()

ggplotly(tt_wday_plt)
```

Plotly enables interactive filtering. Double click on `Day of Week` element in the legend to isolate a single day, subsequent clicks add additional days back to the displayed data. For example, by removing everything except Thursday and Saturday, you can reproduce the image below using the interactive plotly image above.

![Example Plotly Image filtered by Day of Week](image/TunnelTrafic_plotly_example.png)
