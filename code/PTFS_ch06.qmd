---
title: "Practical Time Series Forecasting - Figures and Tables - Chapter 6"
format: html
editor: visual
execute:
  echo: true
  warning: false
---

Scripts adapted from [Practical Time Series Forecasting - Datasets & R Code](https://www.forecastingbook.com/resources/data-and-code)

## 

## 6.1 Model with Trend

### Figure 6.2

```{r}
source(here::here('code', 'ptfs_functions.R'))

#| message: false
library(forecast)
library(zoo)

amtrak_csv <- here::here("data", "Amtrak data.csv")
Amtrak.data <- read.csv(amtrak_csv)
ridership.ts <- ts(Amtrak.data$Ridership, start = c(1991, 1), end = c(2004, 3), freq = 12)

nValid <- 36
nTrain <- length(ridership.ts) - nValid
train.ts <- window(ridership.ts, start = c(1991, 1), end = c(1991, nTrain))
valid.ts <- window(ridership.ts, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))

train.lm <- tslm(train.ts ~ trend)

# Figure 6.2
plot(train.ts, xlab = "Time", ylab = "Ridership", ylim = c(1300, 2300), bty = "l")
lines(train.lm$fitted, lwd = 2)
```

### Update Figure 6.2
```{r upd_reload_data}
#| warning: false
#| message: false
library(fpp3)
library(readxl)

ridership <- read_excel(here::here("data", "Amtrak data.xls"), 
    col_types = c("date", "numeric")) %>% 
  mutate(Month = yearmonth(Month)) %>% 
  as_tsibble(index = Month)
```

```{r}
ridership_trn <- ridership %>% 
  filter_index("1991 Jan" ~ "2001 Mar")

ridership_tslm_fit <- ridership_trn |> 
  model(
    tslm = TSLM(Ridership ~ trend())
  ) 

ridership_tslm_fit |>
  augment() |> 
  autoplot(.fitted) +
  autolayer(ridership_trn, Ridership) +
  labs(y = "Ridership")


```

### Figure 6.3

```{r}
train.lm.pred <- forecast(train.lm, h = nValid, level = 0)
plot(train.lm.pred, ylim = c(1300, 2600),  ylab = "Ridership", xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "", flty = 2)
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.lm.pred$fitted, lwd = 2, col = "blue") 

amtrak_ts_annotations(2500)
```

### Update Figure 6.3
```{r}
ridership_tslm_fc <- ridership_tslm_fit |>
  forecast(h = 36) 

ridership_tslm_fc |> 
  autoplot(level = NULL, ridership_trn |> append_row(36 + 21), linetype = "longdash") |> 
  ridership_annotation() +
  geom_line(data = ridership_tslm_fit |> augment(), aes(y = .fitted), color = "blue") 
```

### Table 6.1

```{r}
# Table 6.1
summary(train.lm)
```

### Update Table 6.1
```{r}
ridership_tslm_fit |> report()
```


### Figure 6.4

```{r}
train.lm.expo.trend <- tslm(train.ts ~ trend, lambda = 0)
train.lm.expo.trend.pred <- forecast(train.lm.expo.trend, h = nValid, level = 0)

train.lm.linear.trend <- tslm(train.ts ~ trend, lambda = 1)
train.lm.linear.trend.pred <- forecast(train.lm.linear.trend, h = nValid, level = 0)

# Figures 6-3/6-4
plot(train.lm.expo.trend.pred, ylim = c(1300, 2600),  ylab = "Ridership", xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "", flty = 2)
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.lm.expo.trend.pred$fitted, lwd = 2, col = "blue")  # Added in 6-4
lines(train.lm.linear.trend.pred$fitted, lwd = 2, col = "black", lty = 3)
lines(train.lm.linear.trend.pred$mean, lwd = 2, col = "black", lty = 3)
lines(valid.ts)

amtrak_ts_annotations(2500)
```



### Table 6.2

```{r}
train.lm.poly.trend <- tslm(train.ts ~ trend + I(trend^2))
summary(train.lm.poly.trend)
```

### Updated Table 6.2

```{r}
ridership_tslm2_fit <- ridership_trn |> 
  model(
    tslm2 = TSLM(Ridership ~ trend() + I(trend()^2))
  )
ridership_tslm2_fit |> report()
```


## 6.2 Model with Seasonality

### Table 6.3

```{r}
# Table 6.3
train.lm.season <- tslm(train.ts ~ season)
summary(train.lm.season)
train.lm.season.pred <- forecast(train.lm.season, h = nValid, level = 0)
```

### Updated Table 6.3

```{r}
ridership_tslm_season_fit <- ridership_trn |> 
  model(
    tslm_season = TSLM(Ridership ~ season())
  )

ridership_tslm_season_fit |> report()
```



### Figure 6.6

```{r}
#| fig-height: 8
# Figure 6-6
par(mfrow = c(2,1))
plot(train.lm.season.pred, ylim = c(1300, 2625),  ylab = "Ridership", xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "", flty = 2)
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.lm.season.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
amtrak_ts_annotations(2500)

plot(train.lm.season.pred$residuals, ylim = c(-400, 550),  ylab = "Residuals", xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.ts - train.lm.season.pred$fitted)
lines(valid.ts - train.lm.season.pred$mean)
amtrak_ts_annotations(500)

```

### Updated Figure 6.6

```{r}
ridership_tslm_season_fc <- ridership_tslm_season_fit |> 
  forecast(h = 36) 

ridership |> 
  append_row(21) |>
  autoplot(Ridership, alpha = 0.3) |> 
  ridership_annotation() +
  geom_line(data = ridership_tslm_season_fit |> augment(), aes(y = .fitted), color = "blue") +
  autolayer(ridership_tslm_season_fc, level = NULL, color = "blue") +
  labs(y = "Ridership")

```
```{r}
#plot residuals for seasonality model 
ridership_tslm_season_resid <- ridership_tslm_season_fc |> 
  as_tibble() |>
  select(Month, .mean) |> 
  left_join(ridership, by = "Month") |> 
  mutate(residuals = Ridership - .mean) 
  
ridership_tslm_season_fit |> 
  augment() |> 
  append_row(36+21) |>
  autoplot(.innov) |> 
  ridership_annotation(y = 400) +
  geom_line(data =ridership_tslm_season_resid, aes(y = residuals)) 
```



## 6.3 Model with Trend and Seasonality

### Table 6.4

```{r}
train.lm.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)
train.lm.trend.season.pred <- forecast(train.lm.trend.season, h = nValid, level = 0)

# Table 6-4
summary(train.lm.trend.season)
```


### Updated Table 6.4
```{r}
ridership_tslm_both_fit <- ridership_trn |> 
  model(
    tslm3 = TSLM(Ridership ~ trend() + I(trend()^2) + season())
  )

ridership_tslm_both_fit |> report()
```



### Figure 6.7

```{r}
# Figure 6-7
par(mfrow = c(2,1))
plot(train.lm.trend.season.pred, ylim = c(1300, 2625),  ylab = "Ridership", xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "", flty = 2)
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.lm.trend.season.pred$fitted, lwd = 2, col = "blue")
lines(valid.ts)
amtrak_ts_annotations(2500)

plot(train.lm.trend.season.pred$residuals, ylim = c(-400, 550),  ylab = "Residuals", xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.ts - train.lm.trend.season.pred$fitted)
lines(valid.ts - train.lm.trend.season.pred$mean)
amtrak_ts_annotations(500)

```

### Updated Figure 6.7

```{r}
ridership_tslm_both_fc <- ridership_tslm_both_fit |> 
  forecast(h = 36) 

ridership |> 
  append_row(21) |>
  autoplot(Ridership, alpha = 0.3) |> 
  ridership_annotation() +
  geom_line(data = ridership_tslm_both_fit |> augment(), aes(y = .fitted), color = "blue") +
  autolayer(ridership_tslm_both_fc, level = NULL, color = "blue") +
  labs(y = "Ridership")
```

```{r}
#plot residuals for seasonality model 
ridership_tslm_both_resid <- ridership_tslm_both_fc |> 
  as_tibble() |>
  select(Month, .mean) |> 
  left_join(ridership, by = "Month") |> 
  mutate(residuals = Ridership - .mean) 
  
ridership_tslm_both_fit |> 
  augment() |> 
  append_row(36+21) |>
  autoplot(.innov) |> 
  ridership_annotation(y = 400) +
  geom_line(data =ridership_tslm_both_resid, aes(y = residuals))
```

At this point we'll depart from our attempts to reproduce the plots from the textbook in favor of some of the out of the box plotting tools from the `tidyverts` packages.

```{r}
ridership_tslm_both_fit |> 
  gg_tsresiduals() 
```
Let's also look more generically at how we could run and compare these models more efficiently.

```{r}
ridership_tslm_multi_fit <- ridership_trn |> 
  model(
    tslm_ltrend = TSLM(Ridership ~ trend()),
    tslm_qtrend = TSLM(Ridership ~ trend() + I(trend()^2)),
    tslm_season = TSLM(Ridership ~ season()),
    tslm_all = TSLM(Ridership ~ trend() + I(trend()^2) + season())
  )

ridership_tslm_multi_fit |> report()
```
```{r}
ridership_tslm_multi_fc <- ridership_tslm_multi_fit |> 
  forecast(h = 36)
```


```{r}
ridership_tslm_multi_fc |> 
  autoplot(level = NULL) +
  autolayer(ridership |> tail(60)) +
  labs(y = "Ridership")
```

```{r}

```

```{r}
```


