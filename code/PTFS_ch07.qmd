---
title: "Practical Time Series Forecasting - Figures and Tables - Chapter 7"
format: html
editor: visual
execute:
  echo: true
  warning: false
---

Scripts adapted from [Practical Time Series Forecasting - Datasets & R Code](https://www.forecastingbook.com/resources/data-and-code)

```{r}
#| message: false
#| warning: false
library(tidyverse)
library(fpp3)
```

## 7.1 Autocorrelation

### Figure 7.2

```{r}
source(here::here('code', 'ptfs_functions.R'))

#| message: false
library(forecast)
library(zoo)

amtrak_csv <- here::here("data", "Amtrak data.csv")
Amtrak.data <- read.csv(amtrak_csv)
ridership.ts <- ts(Amtrak.data$Ridership, start = c(1991, 1), end = c(2004, 3), freq = 12)
ridership.24.ts <- window(ridership.ts, start = c(1991, 1), end = c(1991, 24))

# Figure 7-2
Acf(ridership.24.ts, lag.max = 12, main = "")
```

### Updated Figure 7.2

```{r upd_reload_data_ch7}
#| warning: false
#| message: false

library(fpp3)
library(readxl)

ridership <- read_excel(here::here("data", "Amtrak data.xls"), 
    col_types = c("date", "numeric")) %>% 
  mutate(Month = yearmonth(Month)) %>% 
  as_tsibble(index = Month)
```

```{r upd_5-2}
ridership |> 
  head(24) |> 
  ACF(Ridership, lag_max = 12) |> 
  autoplot() +
  theme_minimal()
```

### Figure 7.3

```{r}
nValid <- 36
nTrain <- length(ridership.ts) - nValid
train.ts <- window(ridership.ts, start = c(1991, 1), end = c(1991, nTrain))
valid.ts <- window(ridership.ts, start = c(1991, nTrain + 1), end = c(1991, nTrain + nValid))

train.lm.trend.season <- tslm(train.ts ~ trend + I(trend^2) + season)

# Figure 7-3
Acf(train.lm.trend.season$residuals, lag.max = 12, main = "")

```

### Updated Figure 7.3

```{r upd_7-3}
train_ts <- ridership |> 
  filter_index(. ~ "2001 Mar")
train_lm_trend_season <- train_ts |>
  model(
    tslm = TSLM(Ridership ~ trend() + I(trend()^2) + season())
    ) 
train_lm_trend_season |> 
  augment() |> 
  ACF(.innov, lag_max = 12) |> 
  autoplot() +
  theme_minimal()
```

## 7.2 Improving Forecasts by Capturing Autocorrelation: AR and ARIMA Models

### Figure 7.4

```{r}
train.res.arima <- Arima(train.lm.trend.season$residuals, order = c(1,0,0))
train.res.arima.pred <- forecast(train.res.arima, h = nValid)

# Figure 7-4
plot(train.lm.trend.season$residuals, ylim = c(-250, 250),  ylab = "Residuals", 
     xlab = "Time", bty = "l", xaxt = "n", xlim = c(1991,2006.25), main = "")
axis(1, at = seq(1991, 2006, 1), labels = format(seq(1991, 2006, 1)))
lines(train.res.arima.pred$fitted, lwd = 2, col = "blue")

amtrak_ts_annotations(225)
```

```{r}
summary(train.res.arima)
```

### Updated Figure 7.4

```{r upd_7-4}
#fit an ARIMA model to the residuals
train_res_arima <- train_lm_trend_season |>
  augment() |> 
  select(Month, residuals = .innov) |>
  model(
    ar1 = ARIMA(residuals ~ 1 + pdq(1, 0, 0))
  ) 

(train_res_arima |>
  augment() |> 
  append_row(n = 36 + 21) |>
  ggplot(aes(x = Month)) +
  geom_line(aes(y = .fitted), color = "blue") +
  geom_line(aes(y = residuals)) +
  theme_minimal() ) |> 
  ridership_annotation(y = 200) 
```

```{r}
train_res_arima |> report()
```

*NOTE* - `fable::ARIMA()` constant coefficients are different from `forecast::Arima()` (see [Understanding constants in R](https://otexts.com/fpp3/arima-r.html#understanding-constants-in-r)

### Figure 7.5

```{r}
# Figure 7-5
Acf(train.res.arima$residuals, lag.max = 12, main = "")
```

### Updated Figure 7.5

```{r upd_7-5}
train_res_arima |> 
  augment() |>
  ACF(.innov, lag_max = 12) |> 
  autoplot() +
  theme_minimal()
```

### Table 7.2

```{r}
#| message: false
library(lubridate)
bike_daily_csv <- here::here("data", "BikeSharingDaily.csv")
bike.df <- read.csv(bike_daily_csv)
bike.df$Date <- as.Date(bike.df$dteday, format = "%Y-%m-%d")
bike.df$Month <- month(bike.df$Date, label = TRUE)
bike.df$DOW <- wday(bike.df$Date, label = TRUE)
bike.df$WorkingDay <- factor(bike.df$workingday, levels = c(0, 1), labels = c("Not_Working", "Working"))
bike.df$Weather <- factor(bike.df$weathersit, levels = c(1, 2, 3), labels = c("Clear", "Mist", "Rain_Snow"))

# Create dummy variables.
Month.dummies <- model.matrix(~ 0 + Month, data = bike.df)
DOW.dummies <- model.matrix(~ 0 + DOW, data = bike.df)
WorkingDay_Weather.dummies <- model.matrix(~ 0 + WorkingDay:Weather, data = bike.df)

# Change the names of the dummy variables.
colnames(Month.dummies) <- gsub("Month", "", colnames(Month.dummies))
colnames(DOW.dummies) <- gsub("DOW", "", colnames(DOW.dummies))
colnames(WorkingDay_Weather.dummies) <- gsub("WorkingDay", "", colnames(WorkingDay_Weather.dummies))
colnames(WorkingDay_Weather.dummies) <- gsub("Weather", "", colnames(WorkingDay_Weather.dummies))
colnames(WorkingDay_Weather.dummies) <- gsub(":", "_", colnames(WorkingDay_Weather.dummies))

# Set up training and validation sets.
x <- as.data.frame(cbind(Month.dummies[, -12], DOW.dummies[, -7], WorkingDay_Weather.dummies[, -6]))
y <- bike.df$cnt
nTotal <- length(y)
nValid <- 90
nTrain <- nTotal - nValid
xTrain <- x[1:nTrain, ]
yTrain <- y[1:nTrain]
xValid <- x[(nTrain + 1):nTotal, ]
yValid <- y[(nTrain + 1):nTotal]

# Fit tslm.
yTrain.ts <- ts(yTrain)
formula <- as.formula(paste("yTrain.ts", paste(c("trend", colnames(xTrain)), collapse = "+"), sep = "~"))
bike.tslm <- tslm(formula, data = xTrain, lambda = 1)

options(scipen = 999, digits = 6)
summary(bike.tslm)
```

### Updated Table 7.2

```{r upd_tbl7-2}
#| message: false
bike_ts <- read_csv(bike_daily_csv) %>%
  # Use mutate to create new variables, and use lubridate functions directly
    mutate(
    Date = as.Date(dteday, format = "%Y-%m-%d"),
    Month. = factor(
      month(Date, label = TRUE), ordered = FALSE) |> 
      relevel(ref = "Dec"),  
    DOW. = factor(
      wday(Date, label = TRUE), ordered = FALSE) |> 
      relevel(ref = "Sat"),  
    WorkingDay = factor(workingday, levels = c(0, 1), 
                        labels = c("Not_Working", "Working")),
    Weather = factor(weathersit, levels = c(1, 2, 3), 
                     labels = c("Clear", "Mist", "Rain_Snow"))
  )  |> 
  select(Date, cnt, Month., DOW., WorkingDay, Weather) |> 
  as_tsibble(index = Date)

# Set up training and validation sets.
trn_cutoff_date <- max(bike_ts$Date) - days(90)
bike_trn <- bike_ts |> filter(Date <= trn_cutoff_date )
bike_val <- bike_ts |> filter(Date > trn_cutoff_date)
  
bike_tslm <- bike_trn |> 
  model(
    tslm = TSLM(cnt ~ trend() + Month. + DOW. + WorkingDay:Weather)
  )

bike_tslm |> report()
```

### Figure 7.6

```{r}
# Make tslm forecasts.
bike_tslm_pred <-  forecast(bike.tslm, newdata = xValid)
plot(bike.tslm.pred, ylim = c(0, 9000), xlab = "Days", ylab = "Daily Bike Rentals")
```
### Updated Figure 7.6

```{r upd_fig7-6}
bike_tslm_pred <-  forecast(bike_tslm, new_data = bike_val)
bike_tslm_pred |> 
  autoplot(bike_trn) +
  labs(x = "Days", y = "Daily Bike Rentals") +
  theme_minimal()
```


### Walmart Store Data

Figure 7.7 and 7.8 use data from https://www.kaggle.com/competitions/walmart-recruiting-store-sales-forecasting/data. The dataset is not included here as it would violate the terms of use.
